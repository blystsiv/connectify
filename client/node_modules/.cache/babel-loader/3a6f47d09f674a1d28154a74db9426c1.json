{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gstra\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\prog\\\\webRTC-advanced\\\\webRTC-advanced\\\\my-app\\\\src\\\\IntroductionPage\\\\IntroductionPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport logo from \"../resources/images/logo.png\";\nimport ConnectingButtons from \"./ConnectingButtons\";\nimport { connect } from \"react-redux\";\nimport { setIsRoomHost } from \"../store/actions\";\nimport axios from 'axios';\nimport jwt from 'jsonwebtoken';\nimport \"./IntroductionPage.css\";\nimport GoogleAuthIcon from \"./GoogleAuthIcon\";\nimport LogoutButton from \"./LogoutButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IntroductionPage = _ref => {\n  _s();\n  let {\n    setIsRoomHostAction\n  } = _ref;\n  const [googleId, setGoogleId] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  useEffect(() => {\n    setIsRoomHostAction(false);\n    // Проверка на jwt \n    const urlParams = new URLSearchParams(window.location.search);\n    const jwtToken = urlParams.get(\"jwt\");\n    if (jwtToken) {\n      localStorage.setItem(\"jwt\", jwtToken);\n      window.location = \"http://localhost:3000\";\n    }\n  }, []);\n  useEffect(() => {\n    const jwtToken = localStorage.getItem(\"jwt\"); // Получаем значение JWT из Local Storage\n\n    if (jwtToken) {\n      const decodedToken = jwt.decode(jwtToken);\n      if (decodedToken) {\n        console.log(decodedToken.googleId);\n        // setName(decodedToken.name);\n      }\n    }\n  }, []);\n  const renderButton = () => {\n    const jwtToken = localStorage.getItem(\"jwt\"); // Получаем значение JWT из Local Storage\n\n    if (jwtToken) {\n      return /*#__PURE__*/_jsxDEV(LogoutButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(GoogleAuthIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 14\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"introduction_page_container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile_data\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"GoogleId: \", googleId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Name: \", name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), renderButton(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"introduction_page_panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: \"introduction_page_image\",\n        alt: \"Logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ConnectingButtons, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(IntroductionPage, \"hBXAuT/OeCFT9A2DiuSVoqjGY0k=\");\n_c = IntroductionPage;\nconst mapActionsToProps = dispatch => {\n  return {\n    setIsRoomHostAction: isRoomHost => dispatch(setIsRoomHost(isRoomHost))\n  };\n};\nexport default connect(null, mapActionsToProps)(IntroductionPage);\nvar _c;\n$RefreshReg$(_c, \"IntroductionPage\");","map":{"version":3,"names":["React","useEffect","useState","logo","ConnectingButtons","connect","setIsRoomHost","axios","jwt","GoogleAuthIcon","LogoutButton","jsxDEV","_jsxDEV","IntroductionPage","_ref","_s","setIsRoomHostAction","googleId","setGoogleId","name","setName","urlParams","URLSearchParams","window","location","search","jwtToken","get","localStorage","setItem","getItem","decodedToken","decode","console","log","renderButton","fileName","_jsxFileName","lineNumber","columnNumber","className","children","src","alt","_c","mapActionsToProps","dispatch","isRoomHost","$RefreshReg$"],"sources":["C:/Users/gstra/OneDrive/Рабочий стол/prog/webRTC-advanced/webRTC-advanced/my-app/src/IntroductionPage/IntroductionPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport logo from \"../resources/images/logo.png\";\r\nimport ConnectingButtons from \"./ConnectingButtons\";\r\nimport { connect } from \"react-redux\";\r\nimport { setIsRoomHost } from \"../store/actions\";\r\nimport axios from 'axios';\r\nimport jwt from 'jsonwebtoken';\r\n\r\n\r\nimport \"./IntroductionPage.css\";\r\nimport GoogleAuthIcon from \"./GoogleAuthIcon\";\r\nimport LogoutButton from \"./LogoutButton\";\r\n\r\nconst IntroductionPage = ({ setIsRoomHostAction }) => {\r\n  const [googleId, setGoogleId] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setIsRoomHostAction(false);\r\n    // Проверка на jwt \r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const jwtToken = urlParams.get(\"jwt\");\r\n    \r\n    if (jwtToken) {\r\n      localStorage.setItem(\"jwt\", jwtToken);\r\n      window.location = \"http://localhost:3000\";\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const jwtToken = localStorage.getItem(\"jwt\"); // Получаем значение JWT из Local Storage\r\n\r\n    if (jwtToken) {\r\n      const decodedToken = jwt.decode(jwtToken);\r\n      if (decodedToken) {\r\n        console.log(decodedToken.googleId);\r\n        // setName(decodedToken.name);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const renderButton = () => {\r\n    const jwtToken = localStorage.getItem(\"jwt\"); // Получаем значение JWT из Local Storage\r\n\r\n    if (jwtToken) {\r\n      return <LogoutButton />;\r\n    } else {\r\n      return <GoogleAuthIcon />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"introduction_page_container\">\r\n      <div className=\"profile_data\">\r\n        <h2>GoogleId: {googleId}</h2>\r\n        <h2>Name: {name}</h2>\r\n      </div>\r\n      {renderButton()}\r\n      <div className=\"introduction_page_panel\">\r\n        <img src={logo} className=\"introduction_page_image\" alt=\"Logo\" />\r\n        <ConnectingButtons />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapActionsToProps = (dispatch) => {\r\n  return {\r\n    setIsRoomHostAction: (isRoomHost) => dispatch(setIsRoomHost(isRoomHost)),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapActionsToProps)(IntroductionPage);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}