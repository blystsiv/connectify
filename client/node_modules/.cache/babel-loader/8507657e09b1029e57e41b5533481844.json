{"ast":null,"code":"import io from \"socket.io-client\";\nimport { setRoomId, setParticipants, setSocketId } from \"../store/actions\";\nimport store from \"../store/store\";\nimport * as webRTCHandler from \"./webRTCHandler\";\nimport { appendNewMessageToChatHistory } from \"./directMessages\";\nconst SERVER = \"http://localhost:5002\";\nlet socket = null;\nexport const connectWithSocketIOServer = () => {\n  socket = io(SERVER);\n  socket.on(\"connect\", () => {\n    console.log(\"successfully connected with socket io server\");\n    console.log(socket.id);\n    store.dispatch(setSocketId(socket.id));\n  });\n  socket.on(\"room-id\", data => {\n    const {\n      roomId\n    } = data;\n    store.dispatch(setRoomId(roomId));\n  });\n  socket.on(\"room-update\", data => {\n    const {\n      connectedUsers\n    } = data;\n    store.dispatch(setParticipants(connectedUsers));\n  });\n  socket.on(\"conn-prepare\", data => {\n    const {\n      connUserSocketId\n    } = data;\n    webRTCHandler.prepareNewPeerConnection(connUserSocketId, false);\n\n    // inform the user which just join the room that we have prepared for incoming connection\n    socket.emit(\"conn-init\", {\n      connUserSocketId: connUserSocketId\n    });\n  });\n  socket.on(\"conn-signal\", data => {\n    webRTCHandler.handleSignalingData(data);\n  });\n  socket.on(\"conn-init\", data => {\n    const {\n      connUserSocketId\n    } = data;\n    webRTCHandler.prepareNewPeerConnection(connUserSocketId, true);\n  });\n  socket.on(\"user-disconnected\", data => {\n    webRTCHandler.removePeerConnection(data);\n  });\n  socket.on(\"direct-message\", data => {\n    appendNewMessageToChatHistory(data);\n  });\n};\nexport const createNewRoom = (identity, onlyAudio) => {\n  // emit an event to server that we would like to create new room\n  const data = {\n    identity,\n    onlyAudio\n  };\n  socket.emit(\"create-new-room\", data);\n};\nexport const joinRoom = (identity, roomId, onlyAudio) => {\n  //emit an event to server that we would to join a room\n  const data = {\n    roomId,\n    identity,\n    onlyAudio\n  };\n  socket.emit(\"join-room\", data);\n};\nexport const signalPeerData = data => {\n  socket.emit(\"conn-signal\", data);\n};\nexport const sendDirectMessage = data => {\n  socket.emit(\"direct-message\", data);\n};","map":{"version":3,"names":["io","setRoomId","setParticipants","setSocketId","store","webRTCHandler","appendNewMessageToChatHistory","SERVER","socket","connectWithSocketIOServer","on","console","log","id","dispatch","data","roomId","connectedUsers","connUserSocketId","prepareNewPeerConnection","emit","handleSignalingData","removePeerConnection","createNewRoom","identity","onlyAudio","joinRoom","signalPeerData","sendDirectMessage"],"sources":["C:/Users/gstra/OneDrive/Рабочий стол/prog/webRTC-advanced/webRTC-advanced/my-app/src/utils/wss.js"],"sourcesContent":["import io from \"socket.io-client\";\r\nimport { setRoomId, setParticipants, setSocketId } from \"../store/actions\";\r\nimport store from \"../store/store\";\r\nimport * as webRTCHandler from \"./webRTCHandler\";\r\nimport { appendNewMessageToChatHistory } from \"./directMessages\";\r\n\r\nconst SERVER = \"http://localhost:5002\";\r\n\r\nlet socket = null;\r\n\r\nexport const connectWithSocketIOServer = () => {\r\n  socket = io(SERVER);\r\n\r\n  socket.on(\"connect\", () => {\r\n    console.log(\"successfully connected with socket io server\");\r\n    console.log(socket.id);\r\n    store.dispatch(setSocketId(socket.id));\r\n  });\r\n\r\n  socket.on(\"room-id\", (data) => {\r\n    const { roomId } = data;\r\n    store.dispatch(setRoomId(roomId));\r\n  });\r\n\r\n  socket.on(\"room-update\", (data) => {\r\n    const { connectedUsers } = data;\r\n    store.dispatch(setParticipants(connectedUsers));\r\n  });\r\n\r\n  socket.on(\"conn-prepare\", (data) => {\r\n    const { connUserSocketId } = data;\r\n\r\n    webRTCHandler.prepareNewPeerConnection(connUserSocketId, false);\r\n\r\n    // inform the user which just join the room that we have prepared for incoming connection\r\n    socket.emit(\"conn-init\", { connUserSocketId: connUserSocketId });\r\n  });\r\n\r\n  socket.on(\"conn-signal\", (data) => {\r\n    webRTCHandler.handleSignalingData(data);\r\n  });\r\n\r\n  socket.on(\"conn-init\", (data) => {\r\n    const { connUserSocketId } = data;\r\n    webRTCHandler.prepareNewPeerConnection(connUserSocketId, true);\r\n  });\r\n\r\n  socket.on(\"user-disconnected\", (data) => {\r\n    webRTCHandler.removePeerConnection(data);\r\n  });\r\n\r\n  socket.on(\"direct-message\", (data) => {\r\n    appendNewMessageToChatHistory(data);\r\n  });\r\n};\r\n\r\nexport const createNewRoom = (identity, onlyAudio) => {\r\n  // emit an event to server that we would like to create new room\r\n  const data = {\r\n    identity,\r\n    onlyAudio,\r\n  };\r\n\r\n  socket.emit(\"create-new-room\", data);\r\n};\r\n\r\nexport const joinRoom = (identity, roomId, onlyAudio) => {\r\n  //emit an event to server that we would to join a room\r\n  const data = {\r\n    roomId,\r\n    identity,\r\n    onlyAudio,\r\n  };\r\n\r\n  socket.emit(\"join-room\", data);\r\n};\r\n\r\nexport const signalPeerData = (data) => {\r\n  socket.emit(\"conn-signal\", data);\r\n};\r\n\r\nexport const sendDirectMessage = (data) => {\r\n  socket.emit(\"direct-message\", data);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}