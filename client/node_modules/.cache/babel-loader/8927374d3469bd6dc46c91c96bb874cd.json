{"ast":null,"code":"import { setShowOverlay, setMessages } from \"../store/actions\";\nimport store from \"../store/store\";\nimport * as wss from \"./wss\";\nimport Peer from \"simple-peer\";\nimport { fetchTURNCredentials, getTurnIceServers } from \"./turn\";\nconst defaultConstraints = {\n  audio: true,\n  video: {\n    width: \"480\",\n    height: \"360\"\n  }\n};\nconst onlyAudioConstraints = {\n  audio: true,\n  video: false\n};\nlet localStream;\nexport const getLocalPreviewAndInitRoomConnection = async function (isRoomHost, identity) {\n  let roomId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let onlyAudio = arguments.length > 3 ? arguments[3] : undefined;\n  await fetchTURNCredentials();\n  const constraints = onlyAudio ? onlyAudioConstraints : defaultConstraints;\n  navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n    console.log(\"successfuly received local stream\");\n    localStream = stream;\n    showLocalVideoPreview(localStream);\n\n    // dispatch an action to hide overlay\n    store.dispatch(setShowOverlay(false));\n    isRoomHost ? wss.createNewRoom(identity, onlyAudio) : wss.joinRoom(identity, roomId, onlyAudio);\n  }).catch(err => {\n    console.log(\"error occurred when trying to get an access to local stream\");\n    console.log(err);\n  });\n};\nlet peers = {};\nlet streams = [];\nconst getConfiguration = () => {\n  const turnIceServers = getTurnIceServers();\n  if (turnIceServers) {\n    return {\n      iceServers: [{\n        urls: \"stun:stun.l.google.com:19302\"\n      }, ...turnIceServers]\n    };\n  } else {\n    console.warn(\"Using only STUN server\");\n    return {\n      iceServers: [{\n        urls: \"stun:stun.l.google.com:19302\"\n      }]\n    };\n  }\n};\nconst messengerChannel = \"messenger\";\nexport const prepareNewPeerConnection = (connUserSocketId, isInitiator) => {\n  const configuration = getConfiguration();\n  peers[connUserSocketId] = new Peer({\n    initiator: isInitiator,\n    config: configuration,\n    stream: localStream,\n    channelName: messengerChannel\n  });\n  peers[connUserSocketId].on(\"signal\", data => {\n    // webRTC offer, webRTC Answer (SDP informations), ice candidates\n\n    const signalData = {\n      signal: data,\n      connUserSocketId: connUserSocketId\n    };\n    wss.signalPeerData(signalData);\n  });\n  peers[connUserSocketId].on(\"stream\", stream => {\n    console.log(\"new stream came\");\n    addStream(stream, connUserSocketId);\n    streams = [...streams, stream];\n  });\n  peers[connUserSocketId].on(\"data\", data => {\n    const messageData = JSON.parse(data);\n    appendNewMessage(messageData);\n  });\n};\nexport const handleSignalingData = data => {\n  //add signaling data to peer connection\n  peers[data.connUserSocketId].signal(data.signal);\n};\nexport const removePeerConnection = data => {\n  const {\n    socketId\n  } = data;\n  const videoContainer = document.getElementById(socketId);\n  const videoEl = document.getElementById(`${socketId}-video`);\n  if (videoContainer && videoEl) {\n    const tracks = videoEl.srcObject.getTracks();\n    tracks.forEach(t => t.stop());\n    videoEl.srcObject = null;\n    videoContainer.removeChild(videoEl);\n    videoContainer.parentNode.removeChild(videoContainer);\n    if (peers[socketId]) {\n      peers[socketId].destroy();\n    }\n    delete peers[socketId];\n  }\n};\n\n////////////////////////////////// UI Videos //////////////////////////////////\nconst showLocalVideoPreview = stream => {\n  const videosContainer = document.getElementById(\"videos_portal\");\n  videosContainer.classList.add(\"videos_portal_styles\");\n  const videoContainer = document.createElement(\"div\");\n  videoContainer.classList.add(\"video_track_container\");\n  const videoElement = document.createElement(\"video\");\n  videoElement.autoplay = true;\n  videoElement.muted = true;\n  videoElement.srcObject = stream;\n  videoElement.onloadedmetadata = () => {\n    videoElement.play();\n  };\n  videoContainer.appendChild(videoElement);\n  if (store.getState().connectOnlyWithAudio) {\n    videoContainer.appendChild(getAudioOnlyLabel());\n  }\n  videosContainer.appendChild(videoContainer);\n};\nconst addStream = (stream, connUserSocketId) => {\n  //display incoming stream\n  const videosContainer = document.getElementById(\"videos_portal\");\n  const videoContainer = document.createElement(\"div\");\n  videoContainer.id = connUserSocketId;\n  videoContainer.classList.add(\"video_track_container\");\n  const videoElement = document.createElement(\"video\");\n  videoElement.autoplay = true;\n  videoElement.srcObject = stream;\n  videoElement.id = `${connUserSocketId}-video`;\n  videoElement.onloadedmetadata = () => {\n    videoElement.play();\n  };\n  videoElement.addEventListener(\"click\", () => {\n    if (videoElement.classList.contains(\"full_screen\")) {\n      videoElement.classList.remove(\"full_screen\");\n    } else {\n      videoElement.classList.add(\"full_screen\");\n    }\n  });\n  videoContainer.appendChild(videoElement);\n\n  // check if other user connected only with audio\n  const participants = store.getState().participants;\n  const participant = participants.find(p => p.socketId === connUserSocketId);\n  console.log(participant);\n  if (participant !== null && participant !== void 0 && participant.onlyAudio) {\n    videoContainer.appendChild(getAudioOnlyLabel(participant.identity));\n  } else {\n    videoContainer.style.position = \"static\";\n  }\n  videosContainer.appendChild(videoContainer);\n};\nconst getAudioOnlyLabel = function () {\n  let identity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  const labelContainer = document.createElement(\"div\");\n  labelContainer.classList.add(\"label_only_audio_container\");\n  const label = document.createElement(\"p\");\n  label.classList.add(\"label_only_audio_text\");\n  label.innerHTML = `Only audio ${identity}`;\n  labelContainer.appendChild(label);\n  return labelContainer;\n};\n\n////////////////////////////////// Buttons logic //////////////////////////////////\n\nexport const toggleMic = isMuted => {\n  localStream.getAudioTracks()[0].enabled = isMuted ? true : false;\n};\nexport const toggleCamera = isDisabled => {\n  localStream.getVideoTracks()[0].enabled = isDisabled ? true : false;\n};\nexport const toggleScreenShare = function (isScreenSharingActive) {\n  let screenSharingStream = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  if (isScreenSharingActive) {\n    switchVideoTracks(localStream);\n  } else {\n    switchVideoTracks(screenSharingStream);\n  }\n};\nconst switchVideoTracks = stream => {\n  for (let socket_id in peers) {\n    for (let index in peers[socket_id].streams[0].getTracks()) {\n      for (let index2 in stream.getTracks()) {\n        if (peers[socket_id].streams[0].getTracks()[index].kind === stream.getTracks()[index2].kind) {\n          peers[socket_id].replaceTrack(peers[socket_id].streams[0].getTracks()[index], stream.getTracks()[index2], peers[socket_id].streams[0]);\n          break;\n        }\n      }\n    }\n  }\n};\n\n////////////////////////////////// Messages /////////////////////////////////////\nconst appendNewMessage = messageData => {\n  const messages = store.getState().messages;\n  store.dispatch(setMessages([...messages, messageData]));\n};\nexport const sendMessageUsingDataChannel = messageContent => {\n  // append this message locally\n  const identity = store.getState().identity;\n  const localMessageData = {\n    content: messageContent,\n    identity,\n    messageCreatedByMe: true\n  };\n  appendNewMessage(localMessageData);\n  const messageData = {\n    content: messageContent,\n    identity\n  };\n  const stringifiedMessageData = JSON.stringify(messageData);\n  for (let socketId in peers) {\n    peers[socketId].send(stringifiedMessageData);\n  }\n};","map":{"version":3,"names":["setShowOverlay","setMessages","store","wss","Peer","fetchTURNCredentials","getTurnIceServers","defaultConstraints","audio","video","width","height","onlyAudioConstraints","localStream","getLocalPreviewAndInitRoomConnection","isRoomHost","identity","roomId","arguments","length","undefined","onlyAudio","constraints","navigator","mediaDevices","getUserMedia","then","stream","console","log","showLocalVideoPreview","dispatch","createNewRoom","joinRoom","catch","err","peers","streams","getConfiguration","turnIceServers","iceServers","urls","warn","messengerChannel","prepareNewPeerConnection","connUserSocketId","isInitiator","configuration","initiator","config","channelName","on","data","signalData","signal","signalPeerData","addStream","messageData","JSON","parse","appendNewMessage","handleSignalingData","removePeerConnection","socketId","videoContainer","document","getElementById","videoEl","tracks","srcObject","getTracks","forEach","t","stop","removeChild","parentNode","destroy","videosContainer","classList","add","createElement","videoElement","autoplay","muted","onloadedmetadata","play","appendChild","getState","connectOnlyWithAudio","getAudioOnlyLabel","id","addEventListener","contains","remove","participants","participant","find","p","style","position","labelContainer","label","innerHTML","toggleMic","isMuted","getAudioTracks","enabled","toggleCamera","isDisabled","getVideoTracks","toggleScreenShare","isScreenSharingActive","screenSharingStream","switchVideoTracks","socket_id","index","index2","kind","replaceTrack","messages","sendMessageUsingDataChannel","messageContent","localMessageData","content","messageCreatedByMe","stringifiedMessageData","stringify","send"],"sources":["C:/Users/gstra/project/connectify/client/src/utils/webRTCHandler.js"],"sourcesContent":["import { setShowOverlay, setMessages } from \"../store/actions\";\r\nimport store from \"../store/store\";\r\nimport * as wss from \"./wss\";\r\nimport Peer from \"simple-peer\";\r\nimport { fetchTURNCredentials, getTurnIceServers } from \"./turn\";\r\n\r\nconst defaultConstraints = {\r\n  audio: true,\r\n  video: {\r\n    width: \"480\",\r\n    height: \"360\",\r\n  },\r\n};\r\n\r\nconst onlyAudioConstraints = {\r\n  audio: true,\r\n  video: false,\r\n};\r\n\r\nlet localStream;\r\n\r\nexport const getLocalPreviewAndInitRoomConnection = async (\r\n  isRoomHost,\r\n  identity,\r\n  roomId = null,\r\n  onlyAudio\r\n) => {\r\n  await fetchTURNCredentials();\r\n\r\n  const constraints = onlyAudio ? onlyAudioConstraints : defaultConstraints;\r\n\r\n  navigator.mediaDevices\r\n    .getUserMedia(constraints)\r\n    .then((stream) => {\r\n      console.log(\"successfuly received local stream\");\r\n      localStream = stream;\r\n      showLocalVideoPreview(localStream);\r\n\r\n      // dispatch an action to hide overlay\r\n      store.dispatch(setShowOverlay(false));\r\n\r\n      isRoomHost\r\n        ? wss.createNewRoom(identity, onlyAudio)\r\n        : wss.joinRoom(identity, roomId, onlyAudio);\r\n    })\r\n    .catch((err) => {\r\n      console.log(\r\n        \"error occurred when trying to get an access to local stream\"\r\n      );\r\n      console.log(err);\r\n    });\r\n};\r\n\r\nlet peers = {};\r\nlet streams = [];\r\n\r\nconst getConfiguration = () => {\r\n  const turnIceServers = getTurnIceServers();\r\n\r\n  if (turnIceServers) {\r\n    return {\r\n      iceServers: [\r\n        {\r\n          urls: \"stun:stun.l.google.com:19302\",\r\n        },\r\n        ...turnIceServers,\r\n      ],\r\n    };\r\n  } else {\r\n    console.warn(\"Using only STUN server\");\r\n    return {\r\n      iceServers: [\r\n        {\r\n          urls: \"stun:stun.l.google.com:19302\",\r\n        },\r\n      ],\r\n    };\r\n  }\r\n};\r\n\r\nconst messengerChannel = \"messenger\";\r\n\r\nexport const prepareNewPeerConnection = (connUserSocketId, isInitiator) => {\r\n  const configuration = getConfiguration();\r\n\r\n  peers[connUserSocketId] = new Peer({\r\n    initiator: isInitiator,\r\n    config: configuration,\r\n    stream: localStream,\r\n    channelName: messengerChannel,\r\n  });\r\n\r\n  peers[connUserSocketId].on(\"signal\", (data) => {\r\n    // webRTC offer, webRTC Answer (SDP informations), ice candidates\r\n\r\n    const signalData = {\r\n      signal: data,\r\n      connUserSocketId: connUserSocketId,\r\n    };\r\n\r\n    wss.signalPeerData(signalData);\r\n  });\r\n\r\n  peers[connUserSocketId].on(\"stream\", (stream) => {\r\n    console.log(\"new stream came\");\r\n\r\n    addStream(stream, connUserSocketId);\r\n    streams = [...streams, stream];\r\n  });\r\n\r\n  peers[connUserSocketId].on(\"data\", (data) => {\r\n    const messageData = JSON.parse(data);\r\n    appendNewMessage(messageData);\r\n  });\r\n};\r\n\r\nexport const handleSignalingData = (data) => {\r\n  //add signaling data to peer connection\r\n  peers[data.connUserSocketId].signal(data.signal);\r\n};\r\n\r\nexport const removePeerConnection = (data) => {\r\n  const { socketId } = data;\r\n  const videoContainer = document.getElementById(socketId);\r\n  const videoEl = document.getElementById(`${socketId}-video`);\r\n\r\n  if (videoContainer && videoEl) {\r\n    const tracks = videoEl.srcObject.getTracks();\r\n\r\n    tracks.forEach((t) => t.stop());\r\n\r\n    videoEl.srcObject = null;\r\n    videoContainer.removeChild(videoEl);\r\n\r\n    videoContainer.parentNode.removeChild(videoContainer);\r\n\r\n    if (peers[socketId]) {\r\n      peers[socketId].destroy();\r\n    }\r\n    delete peers[socketId];\r\n  }\r\n};\r\n\r\n////////////////////////////////// UI Videos //////////////////////////////////\r\nconst showLocalVideoPreview = (stream) => {\r\n  const videosContainer = document.getElementById(\"videos_portal\");\r\n  videosContainer.classList.add(\"videos_portal_styles\");\r\n  const videoContainer = document.createElement(\"div\");\r\n  videoContainer.classList.add(\"video_track_container\");\r\n  const videoElement = document.createElement(\"video\");\r\n  videoElement.autoplay = true;\r\n  videoElement.muted = true;\r\n  videoElement.srcObject = stream;\r\n\r\n  videoElement.onloadedmetadata = () => {\r\n    videoElement.play();\r\n  };\r\n\r\n  videoContainer.appendChild(videoElement);\r\n\r\n  if (store.getState().connectOnlyWithAudio) {\r\n    videoContainer.appendChild(getAudioOnlyLabel());\r\n  }\r\n\r\n  videosContainer.appendChild(videoContainer);\r\n};\r\n\r\nconst addStream = (stream, connUserSocketId) => {\r\n  //display incoming stream\r\n  const videosContainer = document.getElementById(\"videos_portal\");\r\n  const videoContainer = document.createElement(\"div\");\r\n  videoContainer.id = connUserSocketId;\r\n\r\n  videoContainer.classList.add(\"video_track_container\");\r\n  const videoElement = document.createElement(\"video\");\r\n  videoElement.autoplay = true;\r\n  videoElement.srcObject = stream;\r\n  videoElement.id = `${connUserSocketId}-video`;\r\n\r\n  videoElement.onloadedmetadata = () => {\r\n    videoElement.play();\r\n  };\r\n\r\n  videoElement.addEventListener(\"click\", () => {\r\n    if (videoElement.classList.contains(\"full_screen\")) {\r\n      videoElement.classList.remove(\"full_screen\");\r\n    } else {\r\n      videoElement.classList.add(\"full_screen\");\r\n    }\r\n  });\r\n\r\n  videoContainer.appendChild(videoElement);\r\n\r\n  // check if other user connected only with audio\r\n  const participants = store.getState().participants;\r\n\r\n  const participant = participants.find((p) => p.socketId === connUserSocketId);\r\n  console.log(participant);\r\n  if (participant?.onlyAudio) {\r\n    videoContainer.appendChild(getAudioOnlyLabel(participant.identity));\r\n  } else {\r\n    videoContainer.style.position = \"static\";\r\n  }\r\n\r\n  videosContainer.appendChild(videoContainer);\r\n};\r\n\r\nconst getAudioOnlyLabel = (identity = \"\") => {\r\n  const labelContainer = document.createElement(\"div\");\r\n  labelContainer.classList.add(\"label_only_audio_container\");\r\n\r\n  const label = document.createElement(\"p\");\r\n  label.classList.add(\"label_only_audio_text\");\r\n  label.innerHTML = `Only audio ${identity}`;\r\n\r\n  labelContainer.appendChild(label);\r\n  return labelContainer;\r\n};\r\n\r\n////////////////////////////////// Buttons logic //////////////////////////////////\r\n\r\nexport const toggleMic = (isMuted) => {\r\n  localStream.getAudioTracks()[0].enabled = isMuted ? true : false;\r\n};\r\n\r\nexport const toggleCamera = (isDisabled) => {\r\n  localStream.getVideoTracks()[0].enabled = isDisabled ? true : false;\r\n};\r\n\r\nexport const toggleScreenShare = (\r\n  isScreenSharingActive,\r\n  screenSharingStream = null\r\n) => {\r\n  if (isScreenSharingActive) {\r\n    switchVideoTracks(localStream);\r\n  } else {\r\n    switchVideoTracks(screenSharingStream);\r\n  }\r\n};\r\n\r\nconst switchVideoTracks = (stream) => {\r\n  for (let socket_id in peers) {\r\n    for (let index in peers[socket_id].streams[0].getTracks()) {\r\n      for (let index2 in stream.getTracks()) {\r\n        if (\r\n          peers[socket_id].streams[0].getTracks()[index].kind ===\r\n          stream.getTracks()[index2].kind\r\n        ) {\r\n          peers[socket_id].replaceTrack(\r\n            peers[socket_id].streams[0].getTracks()[index],\r\n            stream.getTracks()[index2],\r\n            peers[socket_id].streams[0]\r\n          );\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n////////////////////////////////// Messages /////////////////////////////////////\r\nconst appendNewMessage = (messageData) => {\r\n  const messages = store.getState().messages;\r\n  store.dispatch(setMessages([...messages, messageData]));\r\n};\r\n\r\nexport const sendMessageUsingDataChannel = (messageContent) => {\r\n  // append this message locally\r\n  const identity = store.getState().identity;\r\n\r\n  const localMessageData = {\r\n    content: messageContent,\r\n    identity,\r\n    messageCreatedByMe: true,\r\n  };\r\n\r\n  appendNewMessage(localMessageData);\r\n\r\n  const messageData = {\r\n    content: messageContent,\r\n    identity,\r\n  };\r\n\r\n  const stringifiedMessageData = JSON.stringify(messageData);\r\n  for (let socketId in peers) {\r\n    peers[socketId].send(stringifiedMessageData);\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}