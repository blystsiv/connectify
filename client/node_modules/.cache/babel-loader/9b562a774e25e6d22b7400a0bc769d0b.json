{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gstra\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\prog\\\\webRTC-advanced\\\\webRTC-advanced\\\\my-app\\\\src\\\\JoinRoomPage\\\\JoinRoomContent.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport JoinRoomInputs from \"./JoinRoomInputs\";\nimport { connect } from \"react-redux\";\nimport OnlyWithAudioCheckbox from \"./OnlyWithAudioCheckbox\";\nimport jwt from 'jsonwebtoken';\nimport { setConnectOnlyWithAudio, setIdentity, setRoomId } from \"../store/actions\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport JoinRoomButtons from \"./JoinRoomButtons\";\nimport { useHistory } from \"react-router-dom\";\nimport { getRoomExists } from \"../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst JoinRoomContent = props => {\n  _s();\n  const {\n    isRoomHost,\n    setConnectOnlyWithAudio,\n    connectOnlyWithAudio,\n    setIdentityAction,\n    setRoomIdAction\n  } = props;\n  const jwtToken = localStorage.getItem(\"jwt\");\n  let username = '';\n  if (jwtToken) {\n    const decodedToken = jwt.decode(jwtToken);\n    if (decodedToken && decodedToken.user && decodedToken.user.username) {\n      username = decodedToken.user.username.toString();\n    }\n  }\n  const [roomIdValue, setRoomIdValue] = useState(\"\");\n  const [nameValue, setNameValue] = useState(username);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const history = useHistory();\n  const handleJoinRoom = async () => {\n    setIdentityAction(nameValue);\n    if (isRoomHost) {\n      createRoom();\n    } else {\n      await joinRoom();\n    }\n  };\n  const joinRoom = async () => {\n    const responseMessage = await getRoomExists(roomIdValue);\n    const {\n      roomExists,\n      full\n    } = responseMessage;\n    if (roomExists) {\n      if (full) {\n        setErrorMessage(\"Meeting is full. Please try again later.\");\n      } else {\n        // join a room !\n        setRoomIdAction(roomIdValue);\n        history.push(\"/room\");\n      }\n    } else {\n      setErrorMessage(\"Meeting not found. Check your meeting id.\");\n    }\n  };\n  const createRoom = () => {\n    history.push(\"/room\");\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(JoinRoomInputs, {\n      roomIdValue: roomIdValue,\n      setRoomIdValue: setRoomIdValue,\n      nameValue: nameValue,\n      setNameValue: setNameValue,\n      isRoomHost: isRoomHost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OnlyWithAudioCheckbox, {\n      setConnectOnlyWithAudio: setConnectOnlyWithAudio,\n      connectOnlyWithAudio: connectOnlyWithAudio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      errorMessage: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(JoinRoomButtons, {\n      handleJoinRoom: handleJoinRoom,\n      isRoomHost: isRoomHost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(JoinRoomContent, \"ppdSUbP1AVhWD8fEaqEhzlv7imQ=\", false, function () {\n  return [useHistory];\n});\n_c = JoinRoomContent;\nconst mapStoreStateToProps = state => {\n  return {\n    ...state\n  };\n};\nconst mapActionsToProps = dispatch => {\n  return {\n    setConnectOnlyWithAudio: onlyWithAudio => dispatch(setConnectOnlyWithAudio(onlyWithAudio)),\n    setIdentityAction: identity => dispatch(setIdentity(identity)),\n    setRoomIdAction: roomId => dispatch(setRoomId(roomId))\n  };\n};\nexport default connect(mapStoreStateToProps, mapActionsToProps)(JoinRoomContent);\nvar _c;\n$RefreshReg$(_c, \"JoinRoomContent\");","map":{"version":3,"names":["React","useState","JoinRoomInputs","connect","OnlyWithAudioCheckbox","jwt","setConnectOnlyWithAudio","setIdentity","setRoomId","ErrorMessage","JoinRoomButtons","useHistory","getRoomExists","jsxDEV","_jsxDEV","Fragment","_Fragment","JoinRoomContent","props","_s","isRoomHost","connectOnlyWithAudio","setIdentityAction","setRoomIdAction","jwtToken","localStorage","getItem","username","decodedToken","decode","user","toString","roomIdValue","setRoomIdValue","nameValue","setNameValue","errorMessage","setErrorMessage","history","handleJoinRoom","createRoom","joinRoom","responseMessage","roomExists","full","push","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","mapStoreStateToProps","state","mapActionsToProps","dispatch","onlyWithAudio","identity","roomId","$RefreshReg$"],"sources":["C:/Users/gstra/OneDrive/Рабочий стол/prog/webRTC-advanced/webRTC-advanced/my-app/src/JoinRoomPage/JoinRoomContent.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport JoinRoomInputs from \"./JoinRoomInputs\";\r\nimport { connect } from \"react-redux\";\r\nimport OnlyWithAudioCheckbox from \"./OnlyWithAudioCheckbox\";\r\nimport jwt from 'jsonwebtoken';\r\nimport {\r\n  setConnectOnlyWithAudio,\r\n  setIdentity,\r\n  setRoomId,\r\n} from \"../store/actions\";\r\nimport ErrorMessage from \"./ErrorMessage\";\r\nimport JoinRoomButtons from \"./JoinRoomButtons\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { getRoomExists } from \"../utils/api\";\r\n\r\nconst JoinRoomContent = (props) => {\r\n  const {\r\n    isRoomHost,\r\n    setConnectOnlyWithAudio,\r\n    connectOnlyWithAudio,\r\n    setIdentityAction,\r\n    setRoomIdAction,\r\n  } = props;\r\n\r\n  \r\n  const jwtToken = localStorage.getItem(\"jwt\");\r\nlet username = '';\r\nif (jwtToken) {\r\n  const decodedToken = jwt.decode(jwtToken);\r\n  if (decodedToken && decodedToken.user && decodedToken.user.username) {\r\n    username = decodedToken.user.username.toString();\r\n  }\r\n}\r\n\r\nconst [roomIdValue, setRoomIdValue] = useState(\"\");\r\nconst [nameValue, setNameValue] = useState(username);\r\nconst [errorMessage, setErrorMessage] = useState(null);\r\n\r\n\r\n\r\n  const history = useHistory();\r\n\r\n  const handleJoinRoom = async () => {\r\n    setIdentityAction(nameValue);\r\n    if (isRoomHost) {\r\n      createRoom();\r\n    } else {\r\n      await joinRoom();\r\n    }\r\n  };\r\n\r\n  const joinRoom = async () => {\r\n    const responseMessage = await getRoomExists(roomIdValue);\r\n\r\n    const { roomExists, full } = responseMessage;\r\n\r\n    if (roomExists) {\r\n      if (full) {\r\n        setErrorMessage(\"Meeting is full. Please try again later.\");\r\n      } else {\r\n        // join a room !\r\n        setRoomIdAction(roomIdValue);\r\n        history.push(\"/room\");\r\n      }\r\n    } else {\r\n      setErrorMessage(\"Meeting not found. Check your meeting id.\");\r\n    }\r\n  };\r\n\r\n  const createRoom = () => {\r\n    history.push(\"/room\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <JoinRoomInputs\r\n        roomIdValue={roomIdValue}\r\n        setRoomIdValue={setRoomIdValue}\r\n        nameValue={nameValue}\r\n        setNameValue={setNameValue}\r\n        isRoomHost={isRoomHost}\r\n      />\r\n      <OnlyWithAudioCheckbox\r\n        setConnectOnlyWithAudio={setConnectOnlyWithAudio}\r\n        connectOnlyWithAudio={connectOnlyWithAudio}\r\n      />\r\n      <ErrorMessage errorMessage={errorMessage} />\r\n      <JoinRoomButtons\r\n        handleJoinRoom={handleJoinRoom}\r\n        isRoomHost={isRoomHost}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStoreStateToProps = (state) => {\r\n  return {\r\n    ...state,\r\n  };\r\n};\r\n\r\nconst mapActionsToProps = (dispatch) => {\r\n  return {\r\n    setConnectOnlyWithAudio: (onlyWithAudio) =>\r\n      dispatch(setConnectOnlyWithAudio(onlyWithAudio)),\r\n    setIdentityAction: (identity) => dispatch(setIdentity(identity)),\r\n    setRoomIdAction: (roomId) => dispatch(setRoomId(roomId)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStoreStateToProps,\r\n  mapActionsToProps\r\n)(JoinRoomContent);\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,SAASC,OAAO,QAAQ,aAAa;AACrC,OAAOC,qBAAqB,MAAM,yBAAyB;AAC3D,OAAOC,GAAG,MAAM,cAAc;AAC9B,SACEC,uBAAuB,EACvBC,WAAW,EACXC,SAAS,QACJ,kBAAkB;AACzB,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,aAAa,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE7C,MAAMC,eAAe,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACjC,MAAM;IACJC,UAAU;IACVd,uBAAuB;IACvBe,oBAAoB;IACpBC,iBAAiB;IACjBC;EACF,CAAC,GAAGL,KAAK;EAGT,MAAMM,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC;EAC9C,IAAIC,QAAQ,GAAG,EAAE;EACjB,IAAIH,QAAQ,EAAE;IACZ,MAAMI,YAAY,GAAGvB,GAAG,CAACwB,MAAM,CAACL,QAAQ,CAAC;IACzC,IAAII,YAAY,IAAIA,YAAY,CAACE,IAAI,IAAIF,YAAY,CAACE,IAAI,CAACH,QAAQ,EAAE;MACnEA,QAAQ,GAAGC,YAAY,CAACE,IAAI,CAACH,QAAQ,CAACI,QAAQ,CAAC,CAAC;IAClD;EACF;EAEA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGhC,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACiC,SAAS,EAAEC,YAAY,CAAC,GAAGlC,QAAQ,CAAC0B,QAAQ,CAAC;EACpD,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGpC,QAAQ,CAAC,IAAI,CAAC;EAIpD,MAAMqC,OAAO,GAAG3B,UAAU,CAAC,CAAC;EAE5B,MAAM4B,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjCjB,iBAAiB,CAACY,SAAS,CAAC;IAC5B,IAAId,UAAU,EAAE;MACdoB,UAAU,CAAC,CAAC;IACd,CAAC,MAAM;MACL,MAAMC,QAAQ,CAAC,CAAC;IAClB;EACF,CAAC;EAED,MAAMA,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3B,MAAMC,eAAe,GAAG,MAAM9B,aAAa,CAACoB,WAAW,CAAC;IAExD,MAAM;MAAEW,UAAU;MAAEC;IAAK,CAAC,GAAGF,eAAe;IAE5C,IAAIC,UAAU,EAAE;MACd,IAAIC,IAAI,EAAE;QACRP,eAAe,CAAC,0CAA0C,CAAC;MAC7D,CAAC,MAAM;QACL;QACAd,eAAe,CAACS,WAAW,CAAC;QAC5BM,OAAO,CAACO,IAAI,CAAC,OAAO,CAAC;MACvB;IACF,CAAC,MAAM;MACLR,eAAe,CAAC,2CAA2C,CAAC;IAC9D;EACF,CAAC;EAED,MAAMG,UAAU,GAAGA,CAAA,KAAM;IACvBF,OAAO,CAACO,IAAI,CAAC,OAAO,CAAC;EACvB,CAAC;EAED,oBACE/B,OAAA,CAAAE,SAAA;IAAA8B,QAAA,gBACEhC,OAAA,CAACZ,cAAc;MACb8B,WAAW,EAAEA,WAAY;MACzBC,cAAc,EAAEA,cAAe;MAC/BC,SAAS,EAAEA,SAAU;MACrBC,YAAY,EAAEA,YAAa;MAC3Bf,UAAU,EAAEA;IAAW;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,eACFpC,OAAA,CAACV,qBAAqB;MACpBE,uBAAuB,EAAEA,uBAAwB;MACjDe,oBAAoB,EAAEA;IAAqB;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CAAC,eACFpC,OAAA,CAACL,YAAY;MAAC2B,YAAY,EAAEA;IAAa;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5CpC,OAAA,CAACJ,eAAe;MACd6B,cAAc,EAAEA,cAAe;MAC/BnB,UAAU,EAAEA;IAAW;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC;EAAA,eACF,CAAC;AAEP,CAAC;AAAC/B,EAAA,CA9EIF,eAAe;EAAA,QAyBHN,UAAU;AAAA;AAAAwC,EAAA,GAzBtBlC,eAAe;AAgFrB,MAAMmC,oBAAoB,GAAIC,KAAK,IAAK;EACtC,OAAO;IACL,GAAGA;EACL,CAAC;AACH,CAAC;AAED,MAAMC,iBAAiB,GAAIC,QAAQ,IAAK;EACtC,OAAO;IACLjD,uBAAuB,EAAGkD,aAAa,IACrCD,QAAQ,CAACjD,uBAAuB,CAACkD,aAAa,CAAC,CAAC;IAClDlC,iBAAiB,EAAGmC,QAAQ,IAAKF,QAAQ,CAAChD,WAAW,CAACkD,QAAQ,CAAC,CAAC;IAChElC,eAAe,EAAGmC,MAAM,IAAKH,QAAQ,CAAC/C,SAAS,CAACkD,MAAM,CAAC;EACzD,CAAC;AACH,CAAC;AAED,eAAevD,OAAO,CACpBiD,oBAAoB,EACpBE,iBACF,CAAC,CAACrC,eAAe,CAAC;AAAC,IAAAkC,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module"}